# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Analysis(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis_id': 'int',
        'analysis_name': 'str',
        'stratum1_name': 'str',
        'stratum2_name': 'str',
        'stratum3_name': 'str',
        'stratum4_name': 'str',
        'stratum5_name': 'str',
        'chart_type': 'str',
        'data_type': 'str'
    }

    attribute_map = {
        'analysis_id': 'analysisId',
        'analysis_name': 'analysisName',
        'stratum1_name': 'stratum1Name',
        'stratum2_name': 'stratum2Name',
        'stratum3_name': 'stratum3Name',
        'stratum4_name': 'stratum4Name',
        'stratum5_name': 'stratum5Name',
        'chart_type': 'chartType',
        'data_type': 'dataType'
    }

    def __init__(self, analysis_id=None, analysis_name=None, stratum1_name=None, stratum2_name=None, stratum3_name=None, stratum4_name=None, stratum5_name=None, chart_type=None, data_type=None):
        """
        Analysis - a model defined in Swagger
        """

        self._analysis_id = None
        self._analysis_name = None
        self._stratum1_name = None
        self._stratum2_name = None
        self._stratum3_name = None
        self._stratum4_name = None
        self._stratum5_name = None
        self._chart_type = None
        self._data_type = None
        self.discriminator = None

        self.analysis_id = analysis_id
        if analysis_name is not None:
          self.analysis_name = analysis_name
        if stratum1_name is not None:
          self.stratum1_name = stratum1_name
        if stratum2_name is not None:
          self.stratum2_name = stratum2_name
        if stratum3_name is not None:
          self.stratum3_name = stratum3_name
        if stratum4_name is not None:
          self.stratum4_name = stratum4_name
        if stratum5_name is not None:
          self.stratum5_name = stratum5_name
        if chart_type is not None:
          self.chart_type = chart_type
        if data_type is not None:
          self.data_type = data_type

    @property
    def analysis_id(self):
        """
        Gets the analysis_id of this Analysis.
        id analysis

        :return: The analysis_id of this Analysis.
        :rtype: int
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """
        Sets the analysis_id of this Analysis.
        id analysis

        :param analysis_id: The analysis_id of this Analysis.
        :type: int
        """
        if analysis_id is None:
            raise ValueError("Invalid value for `analysis_id`, must not be `None`")

        self._analysis_id = analysis_id

    @property
    def analysis_name(self):
        """
        Gets the analysis_name of this Analysis.
        analysis name

        :return: The analysis_name of this Analysis.
        :rtype: str
        """
        return self._analysis_name

    @analysis_name.setter
    def analysis_name(self, analysis_name):
        """
        Sets the analysis_name of this Analysis.
        analysis name

        :param analysis_name: The analysis_name of this Analysis.
        :type: str
        """

        self._analysis_name = analysis_name

    @property
    def stratum1_name(self):
        """
        Gets the stratum1_name of this Analysis.
        usually concept name corresponding to stratum

        :return: The stratum1_name of this Analysis.
        :rtype: str
        """
        return self._stratum1_name

    @stratum1_name.setter
    def stratum1_name(self, stratum1_name):
        """
        Sets the stratum1_name of this Analysis.
        usually concept name corresponding to stratum

        :param stratum1_name: The stratum1_name of this Analysis.
        :type: str
        """

        self._stratum1_name = stratum1_name

    @property
    def stratum2_name(self):
        """
        Gets the stratum2_name of this Analysis.
        usually concept name corresponding to stratum

        :return: The stratum2_name of this Analysis.
        :rtype: str
        """
        return self._stratum2_name

    @stratum2_name.setter
    def stratum2_name(self, stratum2_name):
        """
        Sets the stratum2_name of this Analysis.
        usually concept name corresponding to stratum

        :param stratum2_name: The stratum2_name of this Analysis.
        :type: str
        """

        self._stratum2_name = stratum2_name

    @property
    def stratum3_name(self):
        """
        Gets the stratum3_name of this Analysis.
        usually concept name corresponding to stratum

        :return: The stratum3_name of this Analysis.
        :rtype: str
        """
        return self._stratum3_name

    @stratum3_name.setter
    def stratum3_name(self, stratum3_name):
        """
        Sets the stratum3_name of this Analysis.
        usually concept name corresponding to stratum

        :param stratum3_name: The stratum3_name of this Analysis.
        :type: str
        """

        self._stratum3_name = stratum3_name

    @property
    def stratum4_name(self):
        """
        Gets the stratum4_name of this Analysis.
        usually concept name corresponding to stratum

        :return: The stratum4_name of this Analysis.
        :rtype: str
        """
        return self._stratum4_name

    @stratum4_name.setter
    def stratum4_name(self, stratum4_name):
        """
        Sets the stratum4_name of this Analysis.
        usually concept name corresponding to stratum

        :param stratum4_name: The stratum4_name of this Analysis.
        :type: str
        """

        self._stratum4_name = stratum4_name

    @property
    def stratum5_name(self):
        """
        Gets the stratum5_name of this Analysis.
        usually concept name corresponding to stratum

        :return: The stratum5_name of this Analysis.
        :rtype: str
        """
        return self._stratum5_name

    @stratum5_name.setter
    def stratum5_name(self, stratum5_name):
        """
        Sets the stratum5_name of this Analysis.
        usually concept name corresponding to stratum

        :param stratum5_name: The stratum5_name of this Analysis.
        :type: str
        """

        self._stratum5_name = stratum5_name

    @property
    def chart_type(self):
        """
        Gets the chart_type of this Analysis.
        chart type to display for this analysis column pie box

        :return: The chart_type of this Analysis.
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """
        Sets the chart_type of this Analysis.
        chart type to display for this analysis column pie box

        :param chart_type: The chart_type of this Analysis.
        :type: str
        """

        self._chart_type = chart_type

    @property
    def data_type(self):
        """
        Gets the data_type of this Analysis.
        data type of this analysis count or distribution

        :return: The data_type of this Analysis.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """
        Sets the data_type of this Analysis.
        data type of this analysis count or distribution

        :param data_type: The data_type of this Analysis.
        :type: str
        """

        self._data_type = data_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Analysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
