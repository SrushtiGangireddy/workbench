# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegistrationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'full_name': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'phone_number': 'str'
    }

    attribute_map = {
        'email': 'email',
        'full_name': 'fullName',
        'given_name': 'givenName',
        'family_name': 'familyName',
        'phone_number': 'phoneNumber'
    }

    def __init__(self, email=None, full_name=None, given_name=None, family_name=None, phone_number=None):
        """
        RegistrationRequest - a model defined in Swagger
        """

        self._email = None
        self._full_name = None
        self._given_name = None
        self._family_name = None
        self._phone_number = None
        self.discriminator = None

        self.email = email
        self.full_name = full_name
        self.given_name = given_name
        self.family_name = family_name
        if phone_number is not None:
          self.phone_number = phone_number

    @property
    def email(self):
        """
        Gets the email of this RegistrationRequest.
        email address of the user

        :return: The email of this RegistrationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this RegistrationRequest.
        email address of the user

        :param email: The email of this RegistrationRequest.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def full_name(self):
        """
        Gets the full_name of this RegistrationRequest.
        the user's full name

        :return: The full_name of this RegistrationRequest.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this RegistrationRequest.
        the user's full name

        :param full_name: The full_name of this RegistrationRequest.
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def given_name(self):
        """
        Gets the given_name of this RegistrationRequest.
        the user's given name (e.g. Alice)

        :return: The given_name of this RegistrationRequest.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """
        Sets the given_name of this RegistrationRequest.
        the user's given name (e.g. Alice)

        :param given_name: The given_name of this RegistrationRequest.
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def family_name(self):
        """
        Gets the family_name of this RegistrationRequest.
        the user's family  name (e.g. Jones)

        :return: The family_name of this RegistrationRequest.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """
        Sets the family_name of this RegistrationRequest.
        the user's family  name (e.g. Jones)

        :param family_name: The family_name of this RegistrationRequest.
        :type: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")

        self._family_name = family_name

    @property
    def phone_number(self):
        """
        Gets the phone_number of this RegistrationRequest.
        the user's phone number

        :return: The phone_number of this RegistrationRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this RegistrationRequest.
        the user's phone number

        :param phone_number: The phone_number of this RegistrationRequest.
        :type: str
        """

        self._phone_number = phone_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegistrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
