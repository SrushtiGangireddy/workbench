# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DbDomain(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_id': 'str',
        'domain_display': 'str',
        'domain_desc': 'str',
        'domain_parent': 'str',
        'domain_route': 'str'
    }

    attribute_map = {
        'domain_id': 'domainId',
        'domain_display': 'domainDisplay',
        'domain_desc': 'domainDesc',
        'domain_parent': 'domainParent',
        'domain_route': 'domainRoute'
    }

    def __init__(self, domain_id=None, domain_display=None, domain_desc=None, domain_parent=None, domain_route=None):
        """
        DbDomain - a model defined in Swagger
        """

        self._domain_id = None
        self._domain_display = None
        self._domain_desc = None
        self._domain_parent = None
        self._domain_route = None
        self.discriminator = None

        self.domain_id = domain_id
        if domain_display is not None:
          self.domain_display = domain_display
        if domain_desc is not None:
          self.domain_desc = domain_desc
        if domain_parent is not None:
          self.domain_parent = domain_parent
        if domain_route is not None:
          self.domain_route = domain_route

    @property
    def domain_id(self):
        """
        Gets the domain_id of this DbDomain.
        domain id

        :return: The domain_id of this DbDomain.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """
        Sets the domain_id of this DbDomain.
        domain id

        :param domain_id: The domain_id of this DbDomain.
        :type: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def domain_display(self):
        """
        Gets the domain_display of this DbDomain.
        web display name

        :return: The domain_display of this DbDomain.
        :rtype: str
        """
        return self._domain_display

    @domain_display.setter
    def domain_display(self, domain_display):
        """
        Sets the domain_display of this DbDomain.
        web display name

        :param domain_display: The domain_display of this DbDomain.
        :type: str
        """

        self._domain_display = domain_display

    @property
    def domain_desc(self):
        """
        Gets the domain_desc of this DbDomain.
        full desc text

        :return: The domain_desc of this DbDomain.
        :rtype: str
        """
        return self._domain_desc

    @domain_desc.setter
    def domain_desc(self, domain_desc):
        """
        Sets the domain_desc of this DbDomain.
        full desc text

        :param domain_desc: The domain_desc of this DbDomain.
        :type: str
        """

        self._domain_desc = domain_desc

    @property
    def domain_parent(self):
        """
        Gets the domain_parent of this DbDomain.
        parent id

        :return: The domain_parent of this DbDomain.
        :rtype: str
        """
        return self._domain_parent

    @domain_parent.setter
    def domain_parent(self, domain_parent):
        """
        Sets the domain_parent of this DbDomain.
        parent id

        :param domain_parent: The domain_parent of this DbDomain.
        :type: str
        """

        self._domain_parent = domain_parent

    @property
    def domain_route(self):
        """
        Gets the domain_route of this DbDomain.
        route

        :return: The domain_route of this DbDomain.
        :rtype: str
        """
        return self._domain_route

    @domain_route.setter
    def domain_route(self, domain_route):
        """
        Sets the domain_route of this DbDomain.
        route

        :param domain_route: The domain_route of this DbDomain.
        :type: str
        """

        self._domain_route = domain_route

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DbDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
