# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'analysis_id': 'int',
        'count_value': 'int',
        'stratum1': 'str',
        'stratum1_name': 'str',
        'stratum2': 'str',
        'stratum2_name': 'str',
        'stratum3': 'str',
        'stratum3_name': 'str',
        'stratum4': 'str',
        'stratum4_name': 'str',
        'stratum5': 'str',
        'stratum5_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'analysis_id': 'analysisId',
        'count_value': 'countValue',
        'stratum1': 'stratum1',
        'stratum1_name': 'stratum1Name',
        'stratum2': 'stratum2',
        'stratum2_name': 'stratum2Name',
        'stratum3': 'stratum3',
        'stratum3_name': 'stratum3Name',
        'stratum4': 'stratum4',
        'stratum4_name': 'stratum4Name',
        'stratum5': 'stratum5',
        'stratum5_name': 'stratum5Name'
    }

    def __init__(self, id=None, analysis_id=None, count_value=None, stratum1=None, stratum1_name=None, stratum2=None, stratum2_name=None, stratum3=None, stratum3_name=None, stratum4=None, stratum4_name=None, stratum5=None, stratum5_name=None):
        """
        AnalysisResult - a model defined in Swagger
        """

        self._id = None
        self._analysis_id = None
        self._count_value = None
        self._stratum1 = None
        self._stratum1_name = None
        self._stratum2 = None
        self._stratum2_name = None
        self._stratum3 = None
        self._stratum3_name = None
        self._stratum4 = None
        self._stratum4_name = None
        self._stratum5 = None
        self._stratum5_name = None
        self.discriminator = None

        if id is not None:
          self.id = id
        self.analysis_id = analysis_id
        if count_value is not None:
          self.count_value = count_value
        if stratum1 is not None:
          self.stratum1 = stratum1
        if stratum1_name is not None:
          self.stratum1_name = stratum1_name
        if stratum2 is not None:
          self.stratum2 = stratum2
        if stratum2_name is not None:
          self.stratum2_name = stratum2_name
        if stratum3 is not None:
          self.stratum3 = stratum3
        if stratum3_name is not None:
          self.stratum3_name = stratum3_name
        if stratum4 is not None:
          self.stratum4 = stratum4
        if stratum4_name is not None:
          self.stratum4_name = stratum4_name
        if stratum5 is not None:
          self.stratum5 = stratum5
        if stratum5_name is not None:
          self.stratum5_name = stratum5_name

    @property
    def id(self):
        """
        Gets the id of this AnalysisResult.
        pk id for jpa code to work

        :return: The id of this AnalysisResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AnalysisResult.
        pk id for jpa code to work

        :param id: The id of this AnalysisResult.
        :type: int
        """

        self._id = id

    @property
    def analysis_id(self):
        """
        Gets the analysis_id of this AnalysisResult.
        id analysis

        :return: The analysis_id of this AnalysisResult.
        :rtype: int
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """
        Sets the analysis_id of this AnalysisResult.
        id analysis

        :param analysis_id: The analysis_id of this AnalysisResult.
        :type: int
        """
        if analysis_id is None:
            raise ValueError("Invalid value for `analysis_id`, must not be `None`")

        self._analysis_id = analysis_id

    @property
    def count_value(self):
        """
        Gets the count_value of this AnalysisResult.
        count

        :return: The count_value of this AnalysisResult.
        :rtype: int
        """
        return self._count_value

    @count_value.setter
    def count_value(self, count_value):
        """
        Sets the count_value of this AnalysisResult.
        count

        :param count_value: The count_value of this AnalysisResult.
        :type: int
        """

        self._count_value = count_value

    @property
    def stratum1(self):
        """
        Gets the stratum1 of this AnalysisResult.
        stratum 1

        :return: The stratum1 of this AnalysisResult.
        :rtype: str
        """
        return self._stratum1

    @stratum1.setter
    def stratum1(self, stratum1):
        """
        Sets the stratum1 of this AnalysisResult.
        stratum 1

        :param stratum1: The stratum1 of this AnalysisResult.
        :type: str
        """

        self._stratum1 = stratum1

    @property
    def stratum1_name(self):
        """
        Gets the stratum1_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :return: The stratum1_name of this AnalysisResult.
        :rtype: str
        """
        return self._stratum1_name

    @stratum1_name.setter
    def stratum1_name(self, stratum1_name):
        """
        Sets the stratum1_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :param stratum1_name: The stratum1_name of this AnalysisResult.
        :type: str
        """

        self._stratum1_name = stratum1_name

    @property
    def stratum2(self):
        """
        Gets the stratum2 of this AnalysisResult.
        stratum 2

        :return: The stratum2 of this AnalysisResult.
        :rtype: str
        """
        return self._stratum2

    @stratum2.setter
    def stratum2(self, stratum2):
        """
        Sets the stratum2 of this AnalysisResult.
        stratum 2

        :param stratum2: The stratum2 of this AnalysisResult.
        :type: str
        """

        self._stratum2 = stratum2

    @property
    def stratum2_name(self):
        """
        Gets the stratum2_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :return: The stratum2_name of this AnalysisResult.
        :rtype: str
        """
        return self._stratum2_name

    @stratum2_name.setter
    def stratum2_name(self, stratum2_name):
        """
        Sets the stratum2_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :param stratum2_name: The stratum2_name of this AnalysisResult.
        :type: str
        """

        self._stratum2_name = stratum2_name

    @property
    def stratum3(self):
        """
        Gets the stratum3 of this AnalysisResult.
        stratum 3

        :return: The stratum3 of this AnalysisResult.
        :rtype: str
        """
        return self._stratum3

    @stratum3.setter
    def stratum3(self, stratum3):
        """
        Sets the stratum3 of this AnalysisResult.
        stratum 3

        :param stratum3: The stratum3 of this AnalysisResult.
        :type: str
        """

        self._stratum3 = stratum3

    @property
    def stratum3_name(self):
        """
        Gets the stratum3_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :return: The stratum3_name of this AnalysisResult.
        :rtype: str
        """
        return self._stratum3_name

    @stratum3_name.setter
    def stratum3_name(self, stratum3_name):
        """
        Sets the stratum3_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :param stratum3_name: The stratum3_name of this AnalysisResult.
        :type: str
        """

        self._stratum3_name = stratum3_name

    @property
    def stratum4(self):
        """
        Gets the stratum4 of this AnalysisResult.
        stratum 4

        :return: The stratum4 of this AnalysisResult.
        :rtype: str
        """
        return self._stratum4

    @stratum4.setter
    def stratum4(self, stratum4):
        """
        Sets the stratum4 of this AnalysisResult.
        stratum 4

        :param stratum4: The stratum4 of this AnalysisResult.
        :type: str
        """

        self._stratum4 = stratum4

    @property
    def stratum4_name(self):
        """
        Gets the stratum4_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :return: The stratum4_name of this AnalysisResult.
        :rtype: str
        """
        return self._stratum4_name

    @stratum4_name.setter
    def stratum4_name(self, stratum4_name):
        """
        Sets the stratum4_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :param stratum4_name: The stratum4_name of this AnalysisResult.
        :type: str
        """

        self._stratum4_name = stratum4_name

    @property
    def stratum5(self):
        """
        Gets the stratum5 of this AnalysisResult.
        stratum 5

        :return: The stratum5 of this AnalysisResult.
        :rtype: str
        """
        return self._stratum5

    @stratum5.setter
    def stratum5(self, stratum5):
        """
        Sets the stratum5 of this AnalysisResult.
        stratum 5

        :param stratum5: The stratum5 of this AnalysisResult.
        :type: str
        """

        self._stratum5 = stratum5

    @property
    def stratum5_name(self):
        """
        Gets the stratum5_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :return: The stratum5_name of this AnalysisResult.
        :rtype: str
        """
        return self._stratum5_name

    @stratum5_name.setter
    def stratum5_name(self, stratum5_name):
        """
        Sets the stratum5_name of this AnalysisResult.
        usually concept name corresponding to stratum

        :param stratum5_name: The stratum5_name of this AnalysisResult.
        :type: str
        """

        self._stratum5_name = stratum5_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
